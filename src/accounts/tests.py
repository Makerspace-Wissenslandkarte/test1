from django.test import TestCase

# Create your tests here.
from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.webdriver import WebDriver

# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from django.contrib.auth import get_user_model

User = get_user_model()


class MySeleniumTests(StaticLiveServerTestCase):

    # https://www.reddit.com/r/Python/comments/p03k0/why_does_no_one_seem_to_care_that_unittest/
    def setUp(self):
        firefox_options = FirefoxOptions()
        firefox_options.headless = True
        self.driver = webdriver.Firefox(options=firefox_options)
        self.driver.implicitly_wait(5)  # seconds
        self.vars = {}

    def tearDown(self):
        self.driver.quit()

    def test_login_success(self):
        password = "P4ssw0rd"
        username = "admin"
        User.objects.create_superuser(username, 'admin@myproject.com', password)

        d = self.driver
        # Step # | name | target | value
        # 1 | open | http://127.0.0.1:8000/ |
        d.get(self.live_server_url)
        # 2 | setWindowSize | 1848x1016 |
        d.set_window_size(1848, 1016)
        # 3 | click | css=span > strong |
        d.find_element(By.CSS_SELECTOR, "span > strong").click()
        # 4 | type | id=id_username | admin
        d.find_element(By.ID, "id_username").send_keys(username)
        # 5 | type | id=id_password | HXWrKTTSMVe8sxz
        d.find_element(By.ID, "id_password").send_keys(password)
        # 6 | sendKeys | id=id_password | ${KEY_ENTER}
        d.find_element(By.ID, "id_password").send_keys(Keys.ENTER)
        WebDriverWait(d, 5).until(lambda d: "profile" in d.current_url)
        # 7 | open | http://127.0.0.1:8000/ |
        d.get(self.live_server_url)
        # 8 | assertText | css=span > div:nth-child(1) | @admin
        assert (element := d.find_element(By.CSS_SELECTOR, "span > div:nth-child(1)")).text == "@" + username
        # 9 | mouseOver | linkText=@admin |
        actions = ActionChains(d)
        actions.move_to_element(element).perform()
        # 10 | assertText | linkText=Administration | Administration
        assert d.find_element(By.LINK_TEXT, "Administration").text == "Administration"
        # 11 | assertText | css=.navbar-item:nth-child(7) > span:nth-child(2) | Abmelden
        assert d.find_element(By.CSS_SELECTOR,
                              ".navbar-item:nth-child(7) > span:nth-child(2)").text == "Abmelden"
        # 12 | click | linkText=Abmelden |
        d.find_element(By.LINK_TEXT, "Abmelden").click()
        # 13 | assertText | css=.title | Abgemeldet
        assert d.find_element(By.CSS_SELECTOR, ".title").text == "Abgemeldet"
        # 14 | click | linkText=Zur Startseite |
        d.find_element(By.LINK_TEXT, "Zur Startseite").click()
        # 15 | verifyText | css=.button:nth-child(1) > span:nth-child(2) | Anmelden
        assert d.find_element(By.CSS_SELECTOR, ".button:nth-child(1) > span:nth-child(2)").text == "Anmelden"
        # 16 | assertText | css=span > strong | Anmelden
        assert d.find_element(By.CSS_SELECTOR, "span > strong").text == "Anmelden"

    def test_login_error(self):
        password = 'P4ssw0rd'
        assert password.lower() != password
        wrongpassword = password.lower()
        username = "admin"
        User.objects.create_superuser(username, 'admin@myproject.com', password)

        d = self.driver
        # Step # | name | target | value
        # 1 | open | http://127.0.0.1:8000/ |
        d.get(self.live_server_url)
        # 2 | setWindowSize | 1848x1016 |
        d.set_window_size(1848, 1016)
        # 3 | click | css=span > strong |
        d.find_element(By.CSS_SELECTOR, "span > strong").click()
        # 4 | type | id=id_username | admin
        d.find_element(By.ID, "id_username").send_keys(username)
        # 5 | type | id=id_password | HXWrKTTSMVe8sxz
        d.find_element(By.ID, "id_password").send_keys(wrongpassword)
        # 6 | sendKeys | id=id_password | ${KEY_ENTER}
        d.find_element(By.ID, "id_password").send_keys(Keys.ENTER)

        assert d.find_element(By.CSS_SELECTOR,
                              ".notification.is-danger").text == "Your username and password didn't match. Please try again."

